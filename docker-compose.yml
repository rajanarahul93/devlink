

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devlink-db
    environment:
      POSTGRES_DB: devlink
      POSTGRES_USER: devlink
      POSTGRES_PASSWORD: devlink_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - devlink-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devlink -d devlink"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: devlink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devlink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./devlink-backend
      dockerfile: Dockerfile
    container_name: devlink-backend
    environment:
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: devlink
      DB_PASSWORD: devlink_password
      DB_NAME: devlink
      JWT_SECRET: RdlG4jFwjJGo00g94QAALZ2M8fr9x1j2R9FFzuHbVpI=
      GIN_MODE: release
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - devlink-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./devlink-frontend
      dockerfile: Dockerfile
    container_name: devlink-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - devlink-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  devlink-network:
    driver: bridge